// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "cc/cc.proto" (package "cc", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * Два параметра query, ids исключающие друг друга,
 * то есть не может использоваться сразу 2 параметра
 *
 * @generated from protobuf message cc.GetCoinsParams
 */
export interface GetCoinsParams {
    /**
     * @generated from protobuf field: int32 offset = 1;
     */
    offset: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 scope = 3;
     */
    scope: number; // в минутах | 60 / 1440 / 10080 / 43200
    /**
     * @generated from protobuf field: optional string query = 5;
     */
    query?: string; // Для фильтрации
    /**
     * @generated from protobuf field: repeated int32 ids = 6;
     */
    ids: number[]; // Для фильтрации
    /**
     * @generated from protobuf field: bool onlyFilter = 7;
     */
    onlyFilter: boolean;
}
/**
 * @generated from protobuf message cc.GetCoinsResponse
 */
export interface GetCoinsResponse {
    /**
     * @generated from protobuf field: repeated cc.Coin coins = 1;
     */
    coins: Coin[];
}
/**
 * @generated from protobuf message cc.Coin
 */
export interface Coin {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string symbol = 3;
     */
    symbol: string;
    /**
     * @generated from protobuf field: string icon = 4;
     */
    icon: string;
    /**
     * @generated from protobuf field: float price = 5;
     */
    price: number; // Текущая ценна на данный момент
    /**
     * @generated from protobuf field: float price_prev = 6;
     */
    pricePrev: number; // Текущая ценна на данный момент
    /**
     * @generated from protobuf field: float dynamic = 7;
     */
    dynamic: number; // Изменение цены за N времени
}
/**
 * @generated from protobuf message cc.GetValuesParams
 */
export interface GetValuesParams {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 scope = 2;
     */
    scope: number; // в минутах | 60 / 1440 / 10080 / 43200
}
/**
 * @generated from protobuf message cc.GetValuesResponse
 */
export interface GetValuesResponse {
    /**
     * @generated from protobuf field: repeated cc.CoinValue values = 1;
     */
    values: CoinValue[];
}
/**
 * @generated from protobuf message cc.CoinValue
 */
export interface CoinValue {
    /**
     * @generated from protobuf field: float price = 1;
     */
    price: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2;
     */
    date?: Timestamp;
}
/**
 * @generated from protobuf enum cc.Method
 */
export enum Method {
    /**
     * @generated from protobuf enum value: NULL = 0;
     */
    NULL = 0,
    /**
     * @generated from protobuf enum value: GET_COINS = 1;
     */
    GET_COINS = 1,
    /**
     * @generated from protobuf enum value: GET_COIN = 2;
     */
    GET_COIN = 2,
    /**
     * @generated from protobuf enum value: GET_VALUES_PER_DAY = 3;
     */
    GET_VALUES_PER_DAY = 3,
    /**
     * @generated from protobuf enum value: GET_VALUES_PER_WEEK = 4;
     */
    GET_VALUES_PER_WEEK = 4,
    /**
     * @generated from protobuf enum value: GET_VALUES_PER_MONTH = 5;
     */
    GET_VALUES_PER_MONTH = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class GetCoinsParams$Type extends MessageType<GetCoinsParams> {
    constructor() {
        super("cc.GetCoinsParams", [
            { no: 1, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "scope", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "query", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "onlyFilter", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetCoinsParams>): GetCoinsParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.offset = 0;
        message.limit = 0;
        message.scope = 0;
        message.ids = [];
        message.onlyFilter = false;
        if (value !== undefined)
            reflectionMergePartial<GetCoinsParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCoinsParams): GetCoinsParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 offset */ 1:
                    message.offset = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 scope */ 3:
                    message.scope = reader.int32();
                    break;
                case /* optional string query */ 5:
                    message.query = reader.string();
                    break;
                case /* repeated int32 ids */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.int32());
                    else
                        message.ids.push(reader.int32());
                    break;
                case /* bool onlyFilter */ 7:
                    message.onlyFilter = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCoinsParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Varint).int32(message.offset);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 scope = 3; */
        if (message.scope !== 0)
            writer.tag(3, WireType.Varint).int32(message.scope);
        /* optional string query = 5; */
        if (message.query !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.query);
        /* repeated int32 ids = 6; */
        if (message.ids.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.int32(message.ids[i]);
            writer.join();
        }
        /* bool onlyFilter = 7; */
        if (message.onlyFilter !== false)
            writer.tag(7, WireType.Varint).bool(message.onlyFilter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.GetCoinsParams
 */
export const GetCoinsParams = new GetCoinsParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCoinsResponse$Type extends MessageType<GetCoinsResponse> {
    constructor() {
        super("cc.GetCoinsResponse", [
            { no: 1, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin }
        ]);
    }
    create(value?: PartialMessage<GetCoinsResponse>): GetCoinsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.coins = [];
        if (value !== undefined)
            reflectionMergePartial<GetCoinsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCoinsResponse): GetCoinsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cc.Coin coins */ 1:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCoinsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cc.Coin coins = 1; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.GetCoinsResponse
 */
export const GetCoinsResponse = new GetCoinsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Coin$Type extends MessageType<Coin> {
    constructor() {
        super("cc.Coin", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "price_prev", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "dynamic", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Coin>): Coin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.symbol = "";
        message.icon = "";
        message.price = 0;
        message.pricePrev = 0;
        message.dynamic = 0;
        if (value !== undefined)
            reflectionMergePartial<Coin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Coin): Coin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string symbol */ 3:
                    message.symbol = reader.string();
                    break;
                case /* string icon */ 4:
                    message.icon = reader.string();
                    break;
                case /* float price */ 5:
                    message.price = reader.float();
                    break;
                case /* float price_prev */ 6:
                    message.pricePrev = reader.float();
                    break;
                case /* float dynamic */ 7:
                    message.dynamic = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Coin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string symbol = 3; */
        if (message.symbol !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.symbol);
        /* string icon = 4; */
        if (message.icon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icon);
        /* float price = 5; */
        if (message.price !== 0)
            writer.tag(5, WireType.Bit32).float(message.price);
        /* float price_prev = 6; */
        if (message.pricePrev !== 0)
            writer.tag(6, WireType.Bit32).float(message.pricePrev);
        /* float dynamic = 7; */
        if (message.dynamic !== 0)
            writer.tag(7, WireType.Bit32).float(message.dynamic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.Coin
 */
export const Coin = new Coin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetValuesParams$Type extends MessageType<GetValuesParams> {
    constructor() {
        super("cc.GetValuesParams", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "scope", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetValuesParams>): GetValuesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.scope = 0;
        if (value !== undefined)
            reflectionMergePartial<GetValuesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetValuesParams): GetValuesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 scope */ 2:
                    message.scope = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetValuesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 scope = 2; */
        if (message.scope !== 0)
            writer.tag(2, WireType.Varint).int32(message.scope);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.GetValuesParams
 */
export const GetValuesParams = new GetValuesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetValuesResponse$Type extends MessageType<GetValuesResponse> {
    constructor() {
        super("cc.GetValuesResponse", [
            { no: 1, name: "values", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CoinValue }
        ]);
    }
    create(value?: PartialMessage<GetValuesResponse>): GetValuesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<GetValuesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetValuesResponse): GetValuesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cc.CoinValue values */ 1:
                    message.values.push(CoinValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetValuesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cc.CoinValue values = 1; */
        for (let i = 0; i < message.values.length; i++)
            CoinValue.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.GetValuesResponse
 */
export const GetValuesResponse = new GetValuesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CoinValue$Type extends MessageType<CoinValue> {
    constructor() {
        super("cc.CoinValue", [
            { no: 1, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CoinValue>): CoinValue {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.price = 0;
        if (value !== undefined)
            reflectionMergePartial<CoinValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoinValue): CoinValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float price */ 1:
                    message.price = reader.float();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CoinValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float price = 1; */
        if (message.price !== 0)
            writer.tag(1, WireType.Bit32).float(message.price);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cc.CoinValue
 */
export const CoinValue = new CoinValue$Type();
/**
 * @generated ServiceType for protobuf service cc.CC
 */
export const CC = new ServiceType("cc.CC", [
    { name: "GetCoins", options: {}, I: GetCoinsParams, O: GetCoinsResponse },
    { name: "GetCoinValues", options: {}, I: GetValuesParams, O: GetValuesResponse }
]);
